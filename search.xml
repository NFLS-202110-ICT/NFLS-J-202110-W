<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ABC 235 Tutorial</title>
    <url>/ABC-235-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Atcoder-Beginner-Contest-235"><a href="#Atcoder-Beginner-Contest-235" class="headerlink" title="Atcoder Beginner Contest 235"></a>Atcoder Beginner Contest 235</h1><p>By xiaruize 2022年1月20日</p>
<span id="more"></span>

<h2 id="A-Rotate"><a href="#A-Rotate" class="headerlink" title="A - Rotate"></a><strong>A - Rotate</strong></h2><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>$显而易见，ans&#x3D;111(a+b+c)$</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="type">int</span> a = x / <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = x / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c = x % <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="number">111</span> * (a + b + c) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="B-Climbing-Takahashi"><a href="#B-Climbing-Takahashi" class="headerlink" title="B - Climbing Takahashi"></a><strong>B - Climbing Takahashi</strong></h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><p><strong>暴力出奇迹</strong></p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[i - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C-The-Kth-Time-Query"><a href="#C-The-Kth-Time-Query" class="headerlink" title="C - The Kth Time Query"></a><strong>C - The Kth Time Query</strong></h2><p>###Method</p>
<p>由$0 \leq a_i \leq 10^9 \rightarrow$ 离散化 $\because 1\leq N\leq 2\times10^5 \therefore$ 空间不会炸</p>
<p>用$g_{i,j}$记录离散化后的数$i$的第$j$次出现的位置</p>
<p>时间复杂度 $O(nlogn)$</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (!mp[a[i]])</span><br><span class="line">            mp[a[i]] = cnt++;</span><br><span class="line">        g[mp[a[i]]].<span class="built_in">pb</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, k;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (mp[x] == <span class="number">0</span> || g[mp[x]].<span class="built_in">size</span>() &lt; k)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; g[mp[x]][k - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="D-Multiply-and-Rotate"><a href="#D-Multiply-and-Rotate" class="headerlink" title="D - Multiply and Rotate"></a><strong>D - Multiply and Rotate</strong></h2><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h3><p><strong>暴力出奇迹</strong></p>
<p>反向进行$dfs$，由$n$向1反推</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> a, n, now = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; mp;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cd</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">p</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i++)</span><br><span class="line">        res *= a;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (mp[x])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    mp[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x % a == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">dfs</span>(x / a, cnt + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (x / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">dfs</span>(x / <span class="built_in">p</span>(<span class="number">10</span>, <span class="built_in">cd</span>(x) - <span class="number">1</span>) + (x % <span class="built_in">p</span>(<span class="number">10</span>, <span class="built_in">cd</span>(x) - <span class="number">1</span>)) * <span class="number">10</span>, cnt + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ans == INF)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="E-MST-1"><a href="#E-MST-1" class="headerlink" title="E - MST + 1"></a><strong>E - MST + 1</strong></h2><h3 id="Method-3"><a href="#Method-3" class="headerlink" title="Method"></a>Method</h3><p> <a href="https://oi-wiki.org/graph/mst/">What is minimum spanning tree and Kruskal?</a></p>
<p><img src="https://img.atcoder.jp/ghi/15ac15edee5a8b055f65192d7323d43b.png" alt="image"></p>
<p>由于题目查询为离线查询，所以可以考虑将要查询的边提前全部插入图中</p>
<p>做Kruskal算法</p>
<p>1.当前边为要查询的边时，只检查，不操作</p>
<p>2.当前边为原图的边时正常操作</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="type">int</span> isq = <span class="number">0</span>;</span><br><span class="line">&#125; s[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">bool</span> ans[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = <span class="built_in">get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">get</span>(x)] = <span class="built_in">get</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s[i].u &gt;&gt; s[i].v &gt;&gt; s[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s[i + m].u &gt;&gt; s[i + m].v &gt;&gt; s[i + m].w;</span><br><span class="line">        s[i + m].isq = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>, s + <span class="number">1</span> + m + q, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m + q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(s[i].u) != <span class="built_in">get</span>(s[i].v))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i].isq)</span><br><span class="line">                ans[s[i].isq] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">merge</span>(s[i].u, s[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">        <span class="keyword">if</span> (ans[i])</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="F-Variety-of-Digits"><a href="#F-Variety-of-Digits" class="headerlink" title="F - Variety of Digits"></a><strong>F - Variety of Digits</strong></h2><h3 id="Method-4"><a href="#Method-4" class="headerlink" title="Method"></a>Method</h3><p>状压数位dp</p>
<p>$dp_{i,j,0}$表示到第$i$位，已有的数为$j$，有多少种可能。</p>
<p>$j&#x3D;(a_1a_2…a_n)_2$其中每个二进制位$a_i$表示题目要求的数字$c_i$是否存在</p>
<p>$dp_{i,j,1}$表示当前状态下的和</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10005</span>][<span class="number">2005</span>][<span class="number">2</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> a[<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> m, msk, now;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; s &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        s[i] -= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j | (<span class="number">1</span> &lt;&lt; k)][<span class="number">0</span>] += dp[i][j][<span class="number">0</span>];</span><br><span class="line">                dp[i + <span class="number">1</span>][j | (<span class="number">1</span> &lt;&lt; k)][<span class="number">1</span>] += dp[i][j][<span class="number">1</span>] * <span class="number">10</span> + dp[i][j][<span class="number">0</span>] * k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][<span class="number">1</span> &lt;&lt; j][<span class="number">0</span>]++;</span><br><span class="line">                dp[i + <span class="number">1</span>][<span class="number">1</span> &lt;&lt; j][<span class="number">1</span>] += j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i || j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][msk | <span class="number">1</span> &lt;&lt; j][<span class="number">0</span>]++;</span><br><span class="line">                dp[i + <span class="number">1</span>][msk | <span class="number">1</span> &lt;&lt; j][<span class="number">1</span>] += now * <span class="number">10</span> + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i + <span class="number">1</span>][j][<span class="number">0</span>] %= MOD;</span><br><span class="line">            dp[i + <span class="number">1</span>][j][<span class="number">1</span>] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        msk |= <span class="number">1</span> &lt;&lt; s[i];</span><br><span class="line">        now = (now * <span class="number">10</span> + s[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        p |= <span class="number">1</span> &lt;&lt; a[i];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; p) == p)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += dp[n][i][<span class="number">1</span>];</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ((msk &amp; p) == p)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += now;</span><br><span class="line">        ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Atcoder</category>
        <category>Atcoder Beginner Contest</category>
        <category>ABC 235 Tutorial</category>
      </categories>
      <tags>
        <tag>Atcoder</tag>
        <tag>Atcoder Beginner Contest</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC 236 Tutorial</title>
    <url>/ABC-236-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Atcoder-Beginner-Contest-236"><a href="#Atcoder-Beginner-Contest-236" class="headerlink" title="Atcoder Beginner Contest 236"></a>Atcoder Beginner Contest 236</h1><h2 id="By-xiaruize-2022年1月23日"><a href="#By-xiaruize-2022年1月23日" class="headerlink" title="By xiaruize 2022年1月23日"></a>By xiaruize 2022年1月23日</h2><span id="more"></span>
<img src="/ABC-236-Tutorial/1.png" class="" title="难度">
<img src="/ABC-236-Tutorial/2.png" class="" title="Difficulty">
<img src="/ABC-236-Tutorial/3.png" class="" title="AC_Count">
<img src="/ABC-236-Tutorial/4.png" class="" title="Last_Accepted_Time">
<h2 id="A-chukodai"><a href="#A-chukodai" class="headerlink" title="A - chukodai"></a><strong>A - chukodai</strong></h2><h3 id="Method-amp-Code"><a href="#Method-amp-Code" class="headerlink" title="Method &amp; Code"></a>Method &amp; Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s;</span><br><span class="line">  cin&gt;&gt;s;</span><br><span class="line">  <span class="type">int</span> a,b;</span><br><span class="line">  cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">  <span class="built_in">swap</span>(s[a<span class="number">-1</span>],s[b<span class="number">-1</span>]);</span><br><span class="line">  cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Who-is-missing"><a href="#B-Who-is-missing" class="headerlink" title="B - Who is missing?"></a><strong>B - Who is missing?</strong></h2><h3 id="Method-amp-Code-1"><a href="#Method-amp-Code-1" class="headerlink" title="Method &amp; Code"></a>Method &amp; Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int,string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"> 	<span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">4</span><span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		cnt[a[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[i]==<span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Route-Map"><a href="#C-Route-Map" class="headerlink" title="C - Route Map"></a><strong>C - Route Map</strong></h2><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>map维护暴力统计</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C - Route Map</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 236</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc236/tasks/abc236_c</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">string s[N];</span><br><span class="line">map&lt;string, <span class="type">bool</span>&gt; mp;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string p;</span><br><span class="line">        cin &gt;&gt; p;</span><br><span class="line">        mp[p] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[s[i]])</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="D-Dance"><a href="#D-Dance" class="headerlink" title="D - Dance"></a><strong>D - Dance</strong></h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><p><strong><em>暴力出奇迹</em></strong></p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D - Dance</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 236</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc236/tasks/abc236_d</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; now &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span> * n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vis[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">calc</span>(x + <span class="number">1</span>, now);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[x] = vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">calc</span>(x + <span class="number">1</span>, now ^ a[x][i]);</span><br><span class="line">            vis[x] = vis[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2</span> * n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="E-Average-and-Median"><a href="#E-Average-and-Median" class="headerlink" title="E - Average and Median"></a><strong>E - Average and Median</strong></h2><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h3><p>本题分为两个部分：平均值和中位数</p>
<h4 id="Part-1：平均值"><a href="#Part-1：平均值" class="headerlink" title="Part 1：平均值"></a>Part 1：平均值</h4><p>明显满足单调性，可以二分</p>
<p>$O(logn)$的复杂度</p>
<p>$\therefore$ 需要$O(N)\ check$</p>
<p>考虑$dp_{i,0/1}$表示当前到第$i$个数，0/1为当前数选或不选</p>
<p>有转移方程，其中$x$为当前$check$的数：</p>
<script type="math/tex; mode=display">
dp_{i,1}=max(dp_{i-1,0},dp_{i-1,1})+a_{i}-x\\
dp_{i,0}=dp_{i-1,1}</script><h4 id="Part-2-中位数"><a href="#Part-2-中位数" class="headerlink" title="Part 2:中位数"></a>Part 2:中位数</h4><p>模仿平均数，见代码。。。</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E - Average and Median</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 236</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc236/tasks/abc236_e</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">double</span> b[N];</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="type">double</span> dp[N][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check1</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>]) + b[i];</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span>(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= c[x])</span><br><span class="line">            d[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        f[i][<span class="number">1</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">1</span>], f[i - <span class="number">1</span>][<span class="number">0</span>]) + d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span>(f[n][<span class="number">1</span>], f[n][<span class="number">0</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], c[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(c + <span class="number">1</span>, c + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">double</span> l = <span class="number">1.0</span>, r = <span class="number">1e9</span> * <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= <span class="number">1e-6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            b[i] = a[i] - mid;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check1</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ll = <span class="number">1</span>, rr = n;</span><br><span class="line">    <span class="keyword">while</span> (ll &lt; rr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (ll + rr + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check2</span>(mid))</span><br><span class="line">            ll = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rr = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; endl &lt;&lt; c[ll] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
        <category>Atcoder Beginner Contest</category>
        <category>ABC 236 Tutorial</category>
      </categories>
      <tags>
        <tag>Atcoder</tag>
        <tag>Atcoder Beginner Contest</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeforcesRound#768(Div.2)</title>
    <url>/Codeforces-Round-768-Div-2-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Codeforces-Round-768-Div-2"><a href="#Codeforces-Round-768-Div-2" class="headerlink" title="Codeforces Round #768 (Div. 2)"></a><a href="https://codeforces.com/contest/1631">Codeforces Round #768 (Div. 2)</a></h1><h2 id="By-xiaruize"><a href="#By-xiaruize" class="headerlink" title="By xiaruize"></a>By xiaruize</h2><span id="more"></span>
<h2 id="A-Min-Max-Swap"><a href="#A-Min-Max-Swap" class="headerlink" title="A. Min Max Swap"></a><a href="https://codeforces.com/contest/1631/problem/A">A. Min Max Swap</a></h2><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>对于$1\leq i\leq n$,若$a_i&gt;b_i$,则$swap(a_i,b_i)$ </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Min Max Swap</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round #768 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1631/problem/0</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> mx, smx;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">            <span class="built_in">swap</span>(a[i], b[i]);</span><br><span class="line">    <span class="type">int</span> mxa = -INF, mxb = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mxa = <span class="built_in">max</span>(mxa, a[i]);</span><br><span class="line">        mxb = <span class="built_in">max</span>(mxb, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; mxa * mxb &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Fun-with-Even-Subarrays"><a href="#B-Fun-with-Even-Subarrays" class="headerlink" title="B. Fun with Even Subarrays"></a><a href="https://codeforces.com/contest/1631/problem/B">B. Fun with Even Subarrays</a></h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><p>$\because$数组的最后一位不可能被别的数代替 $\therefore$最后一定统一为$a_n$</p>
<p>暴力从后往前处理即可</p>
<p>复杂度O(n)/O(log n)</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: F. Flipping Range</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round #768 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1631/problem/F</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = a[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] == num)</span><br><span class="line">            i--;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ans++;</span><br><span class="line">        i = n - <span class="number">2</span> * (n - i) + <span class="number">1</span>;</span><br><span class="line">        cerr &lt;&lt; t &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-And-Matching"><a href="#C-And-Matching" class="headerlink" title="C. And Matching"></a><a href="https://codeforces.com/contest/1631/problem/C">C. And Matching</a></h2><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h3><p>定义$f(x)$为x在二进制下取反的结果</p>
<p>构造:</p>
<p>1.$k=0$</p>
<p>​    让(x,f(x))一组</p>
<p>$\ \because x \ and\  f(x)=0$</p>
<p>$\ \therefore \sum^{n/2}_{i=1}{a_i \ and \  b_i}=0=k$</p>
<p>2.$0&lt; k &lt;n-1$</p>
<p>​    除了$0,k,f(x),n-1$,其它数按$1$操作</p>
<p>​    $\because 0\ and\  f(k)=0\ k\ and \ (n-1)=k \ \therefore \sum^{n/2}_{i=1}{a_i\ and \  b_i}=k$</p>
<ol>
<li><p>$k=n-1$</p>
<p> $\because (n-1)\ and \ (n-2)=n-2\ (n-3)\ and \ 1=1 \0\ and \  2=0$</p>
<p> $\therefore \sum^{n/2}_{i=1}{a_i\ and \  b_i}=n-1$</p>
</li>
</ol>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. And Matching</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round #768 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1631/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(c, x) cerr &lt;&lt; c &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> m = n;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">3</span> &amp;&amp; n == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] = i;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= n / <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[n / <span class="number">2</span>], a[<span class="number">0</span>]);</span><br><span class="line">            k -= n / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[m - i - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
      <categories>
        <category>Codeforces</category>
        <category>Div.2 &amp; Edu</category>
        <category>Round 768(Contest 1631)</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Codeforces</tag>
        <tag>Codeforces Div.2</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC-238-Tutorial</title>
    <url>/ABC-238-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Atcoder-Beginer-Contest-238"><a href="#Atcoder-Beginer-Contest-238" class="headerlink" title="Atcoder Beginer Contest 238"></a>Atcoder Beginer Contest 238</h1><p><strong>By xiaruize</strong></p>
<span id="more"></span>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2>

	<div class="row">
    <embed src="problem.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><img src="/ABC-238-Tutorial/a.png" class="" title="难度估值">
<img src="/ABC-238-Tutorial/Difficulty.png" class="" title="Difficulty">
<img src="/ABC-238-Tutorial/ACCount.png" class="" title="Accepted-Count">
<img src="/ABC-238-Tutorial/LAC.png" class="" title="LastAcceptedTimev.s.Rank">
<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><h3 id="A-Exponential-or-Quadratic"><a href="#A-Exponential-or-Quadratic" class="headerlink" title="A - Exponential or Quadratic"></a><strong>A - Exponential or Quadratic</strong></h3><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p>当$n \geq 4$或$n=1$时,输出$Yes$</p>
<p>否则输出$No$ </p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A - Exponential or Quadratic</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_a</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">4</span> || n == <span class="number">1</span>)</span><br><span class="line">        Yes;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        No;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="B-Pizza"><a href="#B-Pizza" class="headerlink" title="B - Pizza"></a><strong>B - Pizza</strong></h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h4><p>暴力 注意处理第1个和最后一个角</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B - Pizza</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_b</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">400</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="type">int</span> now;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        now = (now + a[i]) % <span class="number">360</span>;</span><br><span class="line">        ans.<span class="built_in">pb</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(a[<span class="number">1</span>], <span class="number">360</span> - a[<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">pb</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">ALL</span>(ans));</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, ans[i + <span class="number">1</span>] - ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, ans[<span class="number">0</span>] - ans[ans.<span class="built_in">size</span>() - <span class="number">1</span>] + <span class="number">360</span>);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-digitnum"><a href="#C-digitnum" class="headerlink" title="C - digitnum"></a><strong>C - digitnum</strong></h3><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h4><p>简单数学题</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C - digitnum</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_c</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int __int128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> __int128 <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">p</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= y; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res *= x % Mod;</span><br><span class="line">        res = (res + Mod) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print</span>((n + <span class="number">1</span>) * n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = n;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m)</span><br><span class="line">    &#123;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">45</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">p</span>(<span class="number">10</span>, i - <span class="number">1</span>);</span><br><span class="line">        x *= <span class="number">9</span>;</span><br><span class="line">        x %= Mod;</span><br><span class="line">        ans += (x + <span class="number">1</span>) * x / <span class="number">2</span>;</span><br><span class="line">        ans %= Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x = n - <span class="built_in">p</span>(<span class="number">10</span>, cnt - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    x %= Mod;</span><br><span class="line">    ans += x * (x + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    ans %= Mod;</span><br><span class="line">    <span class="built_in">print</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D-AND-and-SUM"><a href="#D-AND-and-SUM" class="headerlink" title="D - AND and SUM"></a><strong>D - AND and SUM</strong></h3><h4 id="Method-3"><a href="#Method-3" class="headerlink" title="Method"></a>Method</h4><h5 id="情况1-s-lt-2a"><a href="#情况1-s-lt-2a" class="headerlink" title="情况1 $s&lt;2a$"></a>情况1 $s&lt;2a$</h5><p>$\because x\ AND\  y\ =\ a$</p>
<p>$\therefore x\geq a 且y\geq a$</p>
<p>$\therefore x+y\geq 2a$</p>
<p>$\because x+y = s$</p>
<p>$\therefore s\geq 2a$</p>
<p>$\therefore$<strong>当$s$小于$2a$时直接输出$No$</strong></p>
<h5 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h5><p>如果$a$的当前位为$1$，则$x$和$y$的当前位都为$1$</p>
<p>如果$a$的当前位为$0$，则$x$和$y$的当前位最多一个为$1$</p>
<p>于是就可以按位从高到低考虑当前位是否为$1$</p>
<h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D - AND and SUM</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_d</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> a, s;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (s &lt; a * <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        No;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s -= a * <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> x = s;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        x /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cerr &lt;&lt; t &lt;&lt; &#x27; &#x27; &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (a &amp; (<span class="number">1ll</span> &lt;&lt; i))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// cerr &lt;&lt; (1 &lt;&lt; (i)) &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt;= (<span class="number">1ll</span> &lt;&lt; i))</span><br><span class="line">            s -= (<span class="number">1ll</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">if</span> (!s)</span><br><span class="line">        &#123;</span><br><span class="line">            Yes;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Range-Sums"><a href="#E-Range-Sums" class="headerlink" title="E - Range Sums"></a><strong>E - Range Sums</strong></h3><h4 id="Method-4"><a href="#Method-4" class="headerlink" title="Method"></a>Method</h4><p>设$a$的差分数组为$b$，显然$b<em>0=0$,$\sum^{i}</em>{1\leq i \leq n}{a_i}=b_n$</p>
<p>考虑如何检查能否由$b_0$转移至$b_n$</p>
<p>维护一个并查集，当输入$l_i,r_i$时，$union(l_i-1,r_i)$</p>
<p>如果最后节点$0$和$n$的祖先相同，则输出$Yes$,否则输出$No$</p>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E - Range Sums</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_e</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = <span class="built_in">get</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">get</span>(x)] = <span class="built_in">get</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l[i] &gt;&gt; r[i];</span><br><span class="line">        <span class="built_in">merge</span>(l[i] - <span class="number">1</span>, r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get</span>(<span class="number">0</span>) == <span class="built_in">get</span>(n))</span><br><span class="line">        Yes;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        No;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="F-Two-Exams"><a href="#F-Two-Exams" class="headerlink" title="F - Two Exams"></a><strong>F - Two Exams</strong></h3><h4 id="Method-5"><a href="#Method-5" class="headerlink" title="Method"></a>Method</h4><p>按第$1$场比赛的排名排序，得到序列{3,2,4,1}</p>
<p>设$dp_{i,j,k}$表示考虑到第$i$个人，已经选了$j$个人，已选人中第2场的排名最高为第几</p>
<p>$dp_{0,0,n+1}=1$</p>
<p>转移：</p>
<p>$dp<em>{i,j+1,p}=\sum{dp</em>{i-1,j,p}(Q_i&lt;p)}$</p>
<p>$dp<em>{i,j,min(p,Q_i)}$+=$dp</em>{i-1,j,p}$</p>
<h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: F - Two Exams</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - Monoxer Programming Contest 2022（AtCoder Beginner Contest 238）</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc238/tasks/abc238_f</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(3)</span></span><br><span class="line"><span class="comment">#pragma GCC target(&quot;avx&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;Ofast&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ffast-math&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;unroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-labels&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-falign-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">#pragma GCC optimize(&quot;-ofast&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(n) cin &gt;&gt; n;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">pii a[<span class="number">305</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">305</span>][<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i].fir;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i].sec;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">min</span>(k, i); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">1</span>; p &lt;= n + <span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].sec &lt; p)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j + <span class="number">1</span>][p] += dp[i - <span class="number">1</span>][j][p];</span><br><span class="line">                    dp[i][j + <span class="number">1</span>][p] %= Mod;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j][<span class="built_in">min</span>(p, a[i].sec)] += dp[i - <span class="number">1</span>][j][p];</span><br><span class="line">                dp[i][j][<span class="built_in">min</span>(p, a[i].sec)] %= Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += dp[n][k][i];</span><br><span class="line">        ans %= Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
        <category>Atcoder Beginner Contest</category>
        <category>ABC 238 Tutorial</category>
      </categories>
      <tags>
        <tag>Atcoder</tag>
        <tag>Atcoder Beginner Contest</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Good Things</title>
    <url>/Good-Things/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Thing-To-Use"><a href="#Thing-To-Use" class="headerlink" title="Thing To Use"></a>Thing To Use</h1><h2 id="By-xiaruize"><a href="#By-xiaruize" class="headerlink" title="By xiaruize"></a>By xiaruize</h2><span id="more"></span>
<h2 id="Useful-Websites"><a href="#Useful-Websites" class="headerlink" title="Useful Websites"></a>Useful Websites</h2><h3 id="Graph-Editor"><a href="#Graph-Editor" class="headerlink" title="#Graph Editor"></a>#<a href="https://csacademy.com/app/graph_editor/">Graph Editor</a></h3><h3 id="Diff-Tool"><a href="#Diff-Tool" class="headerlink" title="#Diff Tool"></a>#<a href="https://csacademy.com/app/diffing_tool/">Diff Tool</a></h3><h3 id="Geometry-Widget"><a href="#Geometry-Widget" class="headerlink" title="#Geometry Widget"></a>#<a href="https://csacademy.com/app/geometry_widget/">Geometry Widget</a></h3><h3 id="CPlusPlus"><a href="#CPlusPlus" class="headerlink" title="#CPlusPlus"></a>#<a href="https://cplusplus.com/">CPlusPlus</a></h3><h3 id="OEIS"><a href="#OEIS" class="headerlink" title="#OEIS"></a>#<a href="https://oeis.org">OEIS</a></h3><h3 id="Igfonts"><a href="#Igfonts" class="headerlink" title="#Igfonts"></a>#<a href="https://igfonts.io">Igfonts</a></h3><h3 id="Codeforces-Visualizer"><a href="#Codeforces-Visualizer" class="headerlink" title="#Codeforces Visualizer"></a>#<a href="https://cfviz.netlify.app/">Codeforces Visualizer</a></h3><h3 id="Atcoder-Performances"><a href="#Atcoder-Performances" class="headerlink" title="#Atcoder Performances"></a>#<a href="https://atcoderapps.herokuapp.com/atcoderperformances/">Atcoder Performances</a></h3><h3 id="Encode-amp-Decode"><a href="#Encode-amp-Decode" class="headerlink" title="#Encode&amp;Decode"></a>#<a href="encode.chahuo.com">Encode&amp;Decode</a></h3><h3 id="Atcoder-Problems"><a href="#Atcoder-Problems" class="headerlink" title="#Atcoder Problems"></a>#<a href="https://kenhoooo.com/atcoder#/table">Atcoder Problems</a></h3><h3 id="Alogorithm-Visualizer"><a href="#Alogorithm-Visualizer" class="headerlink" title="#Alogorithm Visualizer"></a>#<a href="https://algorithm-visualizer.org">Alogorithm Visualizer</a></h3><h3 id="Compiler-Online"><a href="#Compiler-Online" class="headerlink" title="#Compiler Online"></a>#<a href="https://tio.run">Compiler Online</a></h3><h3 id="Data-Structure-Visualizations"><a href="#Data-Structure-Visualizations" class="headerlink" title="#Data Structure Visualizations"></a>#<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a></h3><h3 id="VISUALGO"><a href="#VISUALGO" class="headerlink" title="#VISUALGO"></a>#<a href="https://visualgo.net/zh">VISUALGO</a></h3><h3 id="文言"><a href="#文言" class="headerlink" title="#文言("></a>#<a href="https://wy-lang.org">文言(</a></h3>]]></content>
  </entry>
  <entry>
    <title>How-to-make-my-own-blog?</title>
    <url>/How-to-make-my-own-blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="How-to-make-my-own-Blog"><a href="#How-to-make-my-own-Blog" class="headerlink" title="How to make my own Blog?"></a>How to make my own Blog?</h1><p>By xiaruize 20220217</p>
<span id="more"></span>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li><p><a href="https://git-scm.com/downloads">git</a></p>
</li>
<li><p><a href="http://nodejs.cn/download/">Nodejs</a></p>
</li>
</ol>
<p>下载并安装</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>建文件夹存放你的博客</p>
<p>运行如下命令</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>打开$cmd$ $cd$到你刚刚建的文件夹下</p>
<p>然后输入</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这时在 <a href="http://localhost:4000">http://localhost:4000</a> 可以查看本地的预览</p>
<h2 id="怎么让别人看到？"><a href="#怎么让别人看到？" class="headerlink" title="怎么让别人看到？"></a>怎么让别人看到？</h2><p><a href="https://github.com/">https://github.com/</a> </p>
<p>去github建立账号（不会请问度娘</p>
<p>然后点$New \ Repository$，是一个绿色的按钮</p>
<img src="/How-to-make-my-own-blog/a.png" class="">
<p>这样填写:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Repository <span class="type">name</span>: 用户名.github.io</span><br><span class="line">Description:随意</span><br><span class="line">选择<span class="built_in">Public</span></span><br><span class="line">下面的都不选</span><br><span class="line">点<span class="keyword">create</span></span><br></pre></td></tr></table></figure>
<p>打开_config.yml 按如下配置（只截取了要更改的）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment">#你的博客标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#你的博客副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#博客描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#空</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#时区，可以空着</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://用户名.github.io</span> <span class="comment">#注意</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>在$cmd$中输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>
<div class="note danger simple"><p>如果报错则反复重新操作，或检查_config.yml是否正确填写</p>
</div>
<p>deploy完在 <a href="https://用户名.github.io">https://用户名.github.io</a> 中就可以查到自己的Blog了</p>
]]></content>
      <categories>
        <category>Blog</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World !!!"></a>Hello World !!!</h1><h1 id="NFLS-20210834-xiaruize"><a href="#NFLS-20210834-xiaruize" class="headerlink" title="NFLS 20210834 xiaruize"></a>NFLS 20210834 xiaruize</h1><h1 id="Welcome-To-My-Blog"><a href="#Welcome-To-My-Blog" class="headerlink" title="Welcome To My Blog !!!"></a>Welcome To My Blog !!!</h1><h2 id="Accounts"><a href="#Accounts" class="headerlink" title="Accounts"></a>Accounts</h2><p>Codeforces : <a href="https://codeforces.com/profile/xiaruize">xiaruize</a></p>
<p>Atcoder: <a href="https://atcoder.jp/users/xiaruize0911">xiaruize0911</a></p>
<p>Luogu: <a href="https://www.luogu.com.cn/user/111416">xiaruize</a></p>
<h1 id="博客食用指南"><a href="#博客食用指南" class="headerlink" title="博客食用指南"></a>博客食用指南</h1><ol>
<li><p>右下角给xiaruize发消息。。。</p>
</li>
<li><p>喜欢文章请使用分享并评个分(似乎爆了。。。</p>
</li>
<li><p>目前歌曲为Believer,如果想提供歌曲，请给xiaruize发网易云音乐的链接（第1条）Thanks♪(･ω･)ﾉ</p>
</li>
<li><p>如果对Blog有任何问题，请参见第1条</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ABC-244-Tutorial</title>
    <url>/ABC-244-Tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Atcoder-Beginner-Contest-244"><a href="#Atcoder-Beginner-Contest-244" class="headerlink" title="Atcoder Beginner Contest 244"></a>Atcoder Beginner Contest 244</h1><p> By xiaruize 20220320</p>
<img src="/ABC-244-Tutorial/A.png" class="" title="Difficulty">
<h2 id="A-Last-Letter"><a href="#A-Last-Letter" class="headerlink" title="A - Last Letter"></a><strong>A - Last Letter</strong></h2><h3 id="Method-amp-Code"><a href="#Method-amp-Code" class="headerlink" title="Method &amp; Code"></a>Method &amp; Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Name:</span></span><br><span class="line"><span class="comment">	Author: xiaruize</span></span><br><span class="line"><span class="comment">	Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int,string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i,x,y) for(int i=x;i&lt;=y;i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i,x,y) for(int i=x;i&gt;=y;i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t) while(t--) solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rd</span><span class="params">()</span> </span>&#123;<span class="type">int</span> x = <span class="number">0</span>, w = <span class="number">1</span>;<span class="type">char</span> ch = <span class="number">0</span>;<span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>;ch = <span class="built_in">getchar</span>();&#125;<span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;x = x * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);ch = <span class="built_in">getchar</span>();&#125;<span class="keyword">return</span> x * w;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">wt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="type">static</span> <span class="type">int</span> sta[<span class="number">35</span>];<span class="type">int</span> top = <span class="number">0</span>;<span class="keyword">do</span> &#123;sta[top++] = x % <span class="number">10</span>, x /= <span class="number">10</span>;&#125; <span class="keyword">while</span> (x);<span class="keyword">while</span> (top) <span class="built_in">putchar</span>(sta[--top] + <span class="number">48</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bool st;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"> 	<span class="comment">//freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	<span class="comment">//cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">  	string s;</span><br><span class="line">  	cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">  	cout&lt;&lt;s[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Go-Straight-and-Turn-Right"><a href="#B-Go-Straight-and-Turn-Right" class="headerlink" title="B - Go Straight and Turn Right"></a><strong>B - Go Straight and Turn Right</strong></h2><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>模拟</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B - Go Straight and Turn Right</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 244</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc244/tasks/abc244_b</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    x = y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            now = (now + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x += dx[now];</span><br><span class="line">            y += dy[now];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Yamanote-Line-Game"><a href="#C-Yamanote-Line-Game" class="headerlink" title="C - Yamanote Line Game"></a><strong>C - Yamanote Line Game</strong></h2><h3 id="Before-Method"><a href="#Before-Method" class="headerlink" title="Before Method"></a>Before Method</h3><p>此生仅能见到Atcoder出交互题！！！</p>
<h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><p>似乎还是暴力模拟。。。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C - Yamanote Line Game</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 244</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc244/tasks/abc244_c</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2005</span>];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                vis[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        vis[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Swap-Hats"><a href="#D-Swap-Hats" class="headerlink" title="D - Swap Hats"></a><strong>D - Swap Hats</strong></h2><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h3><p>手动模拟一下,当原始为$123$时，只有$123,312,231$可行</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D - Swap Hats</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 244</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc244/tasks/abc244_d</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> b[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> res[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i] == a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                res[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[j + <span class="number">1</span>] != ans[i][j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Yes;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    No;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-King-Bombee"><a href="#E-King-Bombee" class="headerlink" title="E - King Bombee"></a><strong>E - King Bombee</strong></h2><h3 id="Method-3"><a href="#Method-3" class="headerlink" title="Method"></a>Method</h3><p>dp题 $dp_{i,j,0/1}$表示当前考虑第$i$条边，到点$j$，$x$被经过了奇数/偶数次</p>
<script type="math/tex; mode=display">dp_{0,j,0}=\lbrace^{1~(j=s)}_{0~(j\neq s)}</script><script type="math/tex; mode=display">dp_{0,j,1}=0</script><script type="math/tex; mode=display">dp_{i+1,j,x}=\sum_{k\in adj(j)}{dp_{i,k,x}(j\neq x)}</script><script type="math/tex; mode=display">dp_{i+1,X,x}=\sum_{k_\in adj(X)}{dp_{i,k,1-x}}</script><p>答案：$dp_{K,T,0}$</p>
<p>时间复杂度: $O((N+M)K)$</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E - King Bombee</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Beginner Contest 244</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/abc244/tasks/abc244_e</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// TestType: single</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Name:</span></span><br><span class="line"><span class="comment">    Author: xiaruize</span></span><br><span class="line"><span class="comment">    Date:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(a) (a).begin(), (a).end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pis pair<span class="string">&lt;int, string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sec second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fir first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sz(a) int((a).size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, x, y) for (int i = x; i &lt;= y; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> repp(i, x, y) for (int i = x; i &gt;= y; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Yes cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YES cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> No cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NO cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> multitest(t)                                                                                                   \</span></span><br><span class="line"><span class="meta">    while (t--)                                                                                                        \</span></span><br><span class="line"><span class="meta">        solve();</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> double long double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool st;</span></span><br><span class="line"><span class="type">int</span> n, m, k, s, t, x;</span><br><span class="line">vector&lt;pii&gt; edge;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">// bool en;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="comment">// cerr&lt;&lt;(&amp;en-&amp;st)/1024.0/1024.0&lt;&lt;endl;</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s &gt;&gt; t &gt;&gt; x;</span><br><span class="line">    s--;</span><br><span class="line">    t--;</span><br><span class="line">    x--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u--;</span><br><span class="line">        v--;</span><br><span class="line">        edge.<span class="built_in">pb</span>(<span class="built_in">mk</span>(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][s][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [u, v] : edge)</span><br><span class="line">        &#123;</span><br><span class="line">            (dp[i + <span class="number">1</span>][v][<span class="number">0</span> ^ (v == x)] += dp[i][u][<span class="number">0</span>]) %= MOD;</span><br><span class="line">            (dp[i + <span class="number">1</span>][u][<span class="number">0</span> ^ (u == x)] += dp[i][v][<span class="number">0</span>]) %= MOD;</span><br><span class="line">            (dp[i + <span class="number">1</span>][v][<span class="number">1</span> ^ (v == x)] += dp[i][u][<span class="number">1</span>]) %= MOD;</span><br><span class="line">            (dp[i + <span class="number">1</span>][u][<span class="number">1</span> ^ (u == x)] += dp[i][v][<span class="number">1</span>]) %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[k][t][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="待更"><a href="#待更" class="headerlink" title="待更"></a>待更</h1>]]></content>
      <categories>
        <category>Atcoder</category>
        <category>Atcoder Beginner Contest</category>
        <category>ABC 244 Tutorial</category>
      </categories>
      <tags>
        <tag>Atcoder</tag>
        <tag>Atcoder Beginner Contest</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
</search>
